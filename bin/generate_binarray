#!/usr/bin/env python

import numpy as np
import sys, os
import datetime
import pandas as pd
import subprocess
from scipy import sparse
import click


# Compatible with both Python2 and Python3
try:
    from StringIO import StringIO
except ImportError:
    from io import StringIO
import sys

@click.command()
@click.argument("actfile", type=click.Path(exists=True))
@click.option("--binwidth", type=int, default=1, help="bin-width(ms). Default value is 1 (ms).")
def cmd(actfile, binwidth):
    sys.stdout = mystdout = StringIO()
    # Redirect stdout to mystdout variable for logging.
    actfile = os.path.abspath(actfile)
    actdir  = os.path.dirname(actfile)
    d = datetime.datetime.today()
    print("Created at", d.strftime("%F-%m-%dT%H:%M:%S"))
    save_dir = os.path.join(
            os.path.dirname(actfile),
            os.path.basename(actfile).split(".")[0]+"_binsize"+str(binwidth))
    if not os.path.exists(save_dir):
        os.mkdir(save_dir)
    activity    = np.load(actfile)
    nneurons    = activity["nneurons"]
    duration_ms = int(activity["duration_s"] * 1000)
    neuronids   = activity["neurons"]
    spikes_ms   = activity["spikes"] * 1000
    print("nneurons: ", nneurons)
    print("duratoin: ", duration_ms, "(ms)")

    nrow = int(nneurons)
    ncol = int(duration_ms) // binwidth + 1000
    binarray_lil = sparse.lil_matrix((nrow, ncol))
    for neuronid in range(int(nneurons)):
        spike_train_of_a_neuron = spikes_ms[neuronids == neuronid]
        bins = np.arange(0, ncol * binwidth, binwidth)
        digitized_spike_train_of_a_neuron = np.digitize(spike_train_of_a_neuron, bins) - 1
        binned_spike_train_of_a_neuron = np.bincount(digitized_spike_train_of_a_neuron)
        binarray_lil[neuronid, digitized_spike_train_of_a_neuron] = binned_spike_train_of_a_neuron[digitized_spike_train_of_a_neuron]
    binarray_coo = binarray_lil.tocoo()
    binarray_data = {
        "row": binarray_coo.row,
        "col": binarray_coo.col,
        "data": binarray_coo.data,
        "binsize(ms)": binwidth,
        "duration(ms)": int(duration_ms)
    }
    np.savez(os.path.join(save_dir, "binarray_data.npz"), **binarray_data)
    with open(os.path.join(save_dir, "log.txt"), "w") as wf:
        wf.write("GeneratedFrom: "+sys.argv[0]+"\n")
        # Add meta data to the save_file
        wf.write(mystdout.getvalue())
    sys.stdout = sys.__stdout__
    print(save_dir)

def main():
    cmd()
if __name__ == '__main__':
    main()
